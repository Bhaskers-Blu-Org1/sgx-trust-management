/*    
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements. See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership. The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License. You may obtain a copy of the License at
    *
    * http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied. See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

enclave {
    from "sgx_tsgxssl.edl" import *;

    include "stdbool.h"
    include "sgx_report.h"
    include "stdint.h"

    trusted {
    
        public sgx_status_t ECALL_generate_keys();
        
        public sgx_status_t ECALL_get_public_keys_size([out] uint32_t *pub_keys_size);
        public sgx_status_t ECALL_get_public_keys([out,size=pub_keys_size] uint8_t *p_public_keys,
                                              uint32_t pub_keys_size);
        
        public sgx_status_t ECALL_create_enclave_report(
                            [in]  const sgx_target_info_t *p_target_info,
                            [out] sgx_report_t *p_report);
                            
        public sgx_status_t ECALL_get_sealed_keys_size([out] uint32_t *sealed_keys_size);
        
        public sgx_status_t ECALL_seal_keys(
                            [out,size=sealed_keys_size] uint8_t *sealed_keys, 
                            uint32_t sealed_keys_size);
        
        public sgx_status_t ECALL_unseal_keys(
                            [in,size=sealed_keys_size] const uint8_t *sealed_keys,
                            uint32_t sealed_keys_size);
                            
        public sgx_status_t ECALL_add_secret(
                            [in,size=secret_buf_size] const uint8_t *secret_buf,
                            uint32_t secret_buf_size);            
    };

    /* 
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        void ocall_print_string([in, string] const char *str);
    };

};
